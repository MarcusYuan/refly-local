# 构建阶段
FROM node:20-alpine AS builder

# 安装构建依赖
RUN apk add --no-cache curl gcompat openssl python3 py3-pip make g++ git py3-setuptools

# 创建并使用Python虚拟环境安装Trafilatura
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip3 install --upgrade pip && pip3 install trafilatura

# 安装 pandoc 基于架构
ARG TARGETARCH
RUN if [ "$TARGETARCH" = "amd64" ]; then \
        wget https://github.com/jgm/pandoc/releases/download/3.6.3/pandoc-3.6.3-linux-amd64.tar.gz \
        && tar xvzf pandoc-3.6.3-linux-amd64.tar.gz --strip-components 1 -C /usr/local/ \
        && rm pandoc-3.6.3-linux-amd64.tar.gz; \
    elif [ "$TARGETARCH" = "arm64" ]; then \
        wget https://github.com/jgm/pandoc/releases/download/3.6.3/pandoc-3.6.3-linux-arm64.tar.gz \
        && tar xvzf pandoc-3.6.3-linux-arm64.tar.gz --strip-components 1 -C /usr/local/ \
        && rm pandoc-3.6.3-linux-arm64.tar.gz; \
    fi

# 设置工作目录
WORKDIR /app

# 安装 pnpm
RUN npm install -g pnpm@8.15.8

# 直接复制整个项目（除了 node_modules，已在 .dockerignore 中排除）
COPY . .
# 安装依赖
ENV PYTHON=/usr/bin/python3
RUN pnpm install

# 生成 Prisma 客户端
RUN cd apps/api && pnpm prisma generate

# 强制清理构建缓存
RUN rm -rf packages/*/dist packages/*/tsconfig.tsbuildinfo apps/*/dist apps/*/tsconfig.tsbuildinfo

# 按顺序构建所有依赖包
RUN pnpm build --filter=@refly/errors
RUN pnpm build --filter=@refly/i18n
RUN pnpm build --filter=@refly/common-types
RUN pnpm build --filter=@refly/openapi-schema
RUN pnpm build --filter=@refly/utils
RUN pnpm build --filter=@refly/skill-template

# 最后构建 API
RUN pnpm build --filter=@refly/api

# 运行阶段
FROM node:20-alpine

# 安装运行时依赖
RUN apk add --no-cache curl gcompat openssl python3 py3-pip py3-setuptools

# 创建并使用Python虚拟环境安装Trafilatura
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip3 install --upgrade pip && pip3 install trafilatura

# 设置工作目录 - 与原始 Dockerfile 完全一致
WORKDIR /app

# 安装 pnpm
RUN npm install -g pnpm@8.15.8

# 直接从构建阶段复制整个工程目录，包括 node_modules
COPY --from=builder /app/ .

# 设置环境变量
ENV NODE_ENV=production
ENV PYTHON=/opt/venv/bin/python

# 暴露端口 - 与原始 Dockerfile 保持一致
EXPOSE 3000

# 启动命令 - 与原始 Dockerfile 完全一致
CMD ["node", "apps/api/dist/main.js"] 